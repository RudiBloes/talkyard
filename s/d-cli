#!/bin/bash

set_is_prod_test_env_var=''

if [ -n "$IS_PROD_TEST" ]; then
  echo "IS_PROD_TEST: $IS_PROD_TEST"
  set_is_prod_test_env_var='-e IS_PROD_TEST=true'
fi


# Go to the project directory (whih is the parent directory).
script_dir=$( cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd )
cd $script_dir
cd ..

# cli = comman line interface. That is, starts a prompt where you can type
# things like 'clean', 'test', 'compile', 'run', 'dist', 'console'.

# (Don't start nginx â€” apparently it won't find the app container, because the app
# container is here started with 'run' (not 'up') I would think, so it doesn't
# get the correct network address ? )

# Find amount-of-memory-to-use in docker-compose.yml:
PLAY_HEAP_MEMORY_MB=`grep 'PLAY_HEAP_MEMORY_MB:' docker-compose.yml | egrep -o '[0-9]+'`

# Set Java's user.home to /home/owner so sbt and Ivy will cache downloads there. [SBTHOME]
# Actually not needed in this case? because gets set in the entrypoint.sh. Do anyway, won't hurt.
sudo docker-compose run --rm --service-ports $set_is_prod_test_env_var app \
  /opt/sbt/bin/sbt \
  -mem $PLAY_HEAP_MEMORY_MB \
  -jvm-debug 9999 \
  -J-Xss30m \
  -Duser.home=/home/owner \
  -Dcom.sun.management.jmxremote.port=3333 \
  -Dcom.sun.management.jmxremote.ssl=false \
  -Dcom.sun.management.jmxremote.authenticate=false \
  -Dhttp.port=9000 \
  -Dhttps.port=9443 \
  `# SSL has security flaws. Use TLS instead. [NOSSL] [PROTOCONF]` \
  -Ddeployment.security.SSLv2Hello=false \
  -Ddeployment.security.SSLv3=false \
  -Dhttps.protocols=TLSv1.1,TLSv1.2 \
  -Djdk.tls.client.protocols=TLSv1.1,TLSv1.2 \
  -Dconfig.file=/opt/talkyard/app/conf/app-dev.conf \
  "$@"

# -J-XX:+HeapDumpOnOutOfMemoryError \
# -J-XX:HeapDumpPath=/opt/talkyard/app/ \
